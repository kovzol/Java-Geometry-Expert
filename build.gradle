/*
 * This is how you should build JGEX:
 *
 * ./gradlew distZip      # build and package the software as a .zip via the application plugin
 * ./gradlew package      # build and package the software via the javapackager plugin
 *
 * Prerequisites: You need the msgfmt utility to have internationalized text. Otherwise comment
 * the line "tasks.named("classes") { finalizedBy("msgFmtAll") }". FIXME.
 *
 * To run JGEX without the help and examples, just use
 *
 * ./gradlew run
 *
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'io.github.fvarrui:javapackager:1.7.5'
    }
}

plugins {
    id 'application'
}

apply plugin: 'io.github.fvarrui.javapackager.plugin'

tasks.withType(JavaCompile).configureEach {
    // The original sources of JGEX use the keyword "var" which is a reserved word in later Java versions.
    // As a workaround, we set compatibility to source = 8
    sourceCompatibility = 1.8
}

// These are default settings based on Gradle's standard layout:
ext.poDir = 'src/main/po'
ext.classesDir = 'build/classes/java/main'

tasks.addRule("Pattern: msgFmt_<FILE>Po: Compile <FILE>.po into <FILE>.class.") { String taskName ->
    if (taskName.startsWith('msgFmt_') && taskName.endsWith('Po')) {
        def language = (taskName - 'Po').substring('msgFmt_'.length())
        task(taskName) {
            def input = "${poDir}/${language}.po"
            inputs.file input
            def output = "${classesDir}/i18n/Messages_${language}.class"
            outputs.file output
            doLast {
                def msgFmtCmd = "msgfmt --java2 -d ${classesDir} -r i18n.Messages -l ${language} ${input}"
                exec {
                    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
                        commandLine 'cmd', '/c', msgFmtCmd
                    } else {
                        commandLine 'bash', '-c', msgFmtCmd
                    }
                }
            }
        }
    }
}

task msgFmtAll {
    description "Creates the .class files from the .po translations."
    group "build"
    def list = []
    FileTree files = fileTree(dir: poDir)
    files.visit { f ->
        if (f.name.endsWith('.po')) {
            def msgFmtAllTask = 'msgFmt_' + f.name - '.po' + 'Po'
            list << msgFmtAllTask
        }
    }
    dependsOn list
}
tasks.named("classes") { finalizedBy("msgFmtAll") }

distributions {
    main {
        distributionBaseName = 'jgex'
        contents {
            into("bin") { from 'src/docs'}
        }
    }
}

group = 'io.github.kovzol'
version = '0.80'

repositories {
    mavenCentral()
}

dependencies {
    // implementation fileTree(dir: 'lib', include: ['*.jar'])
    // TODO: Fully remove the lib/ folder.
    implementation 'org.apache.xmlgraphics:batik-anim:1.17',
            'org.apache.xmlgraphics:batik-awt-util:1.17',
            'org.apache.xmlgraphics:batik-bridge:1.17',
            'org.apache.xmlgraphics:batik-constants:1.17',
            'org.apache.xmlgraphics:batik-css:1.17',
            'org.apache.xmlgraphics:batik-dom:1.17',
            'org.apache.xmlgraphics:batik-ext:1.17',
            'org.apache.xmlgraphics:batik-gui-util:1.17',
            'org.apache.xmlgraphics:batik-gvt:1.17',
            'org.apache.xmlgraphics:batik-i18n:1.17',
            'org.apache.xmlgraphics:batik-parser:1.17',
            'org.apache.xmlgraphics:batik-script:1.17',
            'org.apache.xmlgraphics:batik-svg-dom:1.17',
            'org.apache.xmlgraphics:batik-swing:1.17',
            'org.apache.xmlgraphics:batik-util:1.17',
            'org.apache.xmlgraphics:batik-xml:1.17',
            'org.apache.xmlgraphics:xmlgraphics-commons:2.9',
            'com.googlecode.gettext-commons:gettext-commons:0.9.8',
            'org.graphper:graph-support:1.1.5',
            'ch.qos.logback:logback-core:1.0.0',
            'org.slf4j:slf4j-simple:2.0.7',
            'xml-apis:xml-apis:1.4.01',
            'xml-apis:xml-apis-ext:1.3.04'
}

// It seems, both settings are required, one for running inside IntelliJ IDEA...
application {
    mainClass = 'wprover.GExpert'
}

// ...and one for the packaging:
jar {
    manifest {
        attributes(
                'Main-Class': application.mainClass
        )
    }
    mustRunAfter "msgFmtAll"
}

// FIXME: When running directly, help and examples are not available.
run {
    mustRunAfter "msgFmtAll"
}

javapackager {
    mainClass = "wprover.GExpert"
    bundleJre = true
    additionalResources = [ file ("src/docs/examples"), file ("src/docs/help") ]
}
