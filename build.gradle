/*
 * This is how you should build JGEX:
 *
 * ./gradlew clean # optional
 * ./gradlew msgFmtAll # build the translations
 * ./gradlew installDist # build the software and create a start script in build/install/jgex/bin
 *
 */

plugins {
    id 'application'
}

tasks.withType(JavaCompile).configureEach {
    // The original sources of JGEX use the keyword "var" which is a reserved word in later Java versions.
    // As a workaround, we set compatibility to source = 8
    sourceCompatibility = 1.8
}

ext.poDir = 'src/main/po'
ext.classesDir = 'build/classes/java/main'

tasks.addRule("Pattern: msgFmt_<FILE>Po: Compile <FILE>.po into <FILE>.class.") { String taskName ->
    if (taskName.startsWith('msgFmt_') && taskName.endsWith('Po')) {
        def language = (taskName - 'Po').substring('msgFmt_'.length())
        task(taskName) {
            def input = "${poDir}/${language}.po"
            inputs.file input
            def output = "${classesDir}/i18n/Messages_${language}.class"
            outputs.file output
            doLast {
                exec { // TODO: This should be implemented for the Windows platform too.
                    commandLine "bash", "-c",
                            "msgfmt --java2 -d ${classesDir} -r i18n.Messages -l ${language} ${input}"
                }
            }
        }
    }
}

task msgFmtAll {
    description "Creates the .class files from the .po translations."
    group "build"
    def list = []
    FileTree files = fileTree(dir: poDir)
    files.visit { f ->
        if (f.name.endsWith('.po')) {
            def msgFmtAllTask = 'msgFmt_' + f.name - '.po' + 'Po'
            list << msgFmtAllTask
        }
    }
    dependsOn list
    // TODO: This should be set correctly, in order to be automatically used on the build task:
    // mustRunAfter 'classes'
}

distributions {
    main {
        distributionBaseName = 'jgex'
        contents {
            into("bin") { from 'src/docs'}
        }
    }
}

group = 'io.github.kovzol'
version = '0.80'

repositories {
    mavenCentral()
}

dependencies {
    implementation fileTree(dir: 'lib', include: ['*.jar'])
}

// It seems, both settings are required, one for running inside IntelliJ IDEA...
application {
    mainClass = 'wprover.GExpert'
}

// ...and one for the packaging:
jar {
    manifest {
        attributes(
                'Main-Class': 'wprover.GExpert'
        )
    }
}
